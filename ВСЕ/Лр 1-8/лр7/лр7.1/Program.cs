using System;
using System.Collections.Generic;

// Абстрактный класс, представляющий автомобиль
abstract class Автомобиль
{
    protected string название; // Поле для хранения названия автомобиля

    public Автомобиль(string название) // Конструктор, устанавливающий название автомобиля
    {
        this.название = название;
    }

    public abstract double РасходТоплива(); // Абстрактный метод для расчета расхода топлива

    public virtual void ВывестиИнформацию() // Виртуальный метод для отображения информации об автомобиле
    {
        Console.WriteLine($"Автомобиль: {название}");
    }
}

// Класс, представляющий грузовой автомобиль
class Грузовой : Автомобиль
{
    private double грузоподъемность; // Поле для хранения грузоподъемности автомобиля

    public Грузовой(string название, double p) : base(название) // Конструктор с вызовом конструктора базового класса
    {
        грузоподъемность = p;
    }

    public override double РасходТоплива() // Реализация расчета расхода топлива для грузовых автомобилей
    {
        return Math.Sqrt(грузоподъемность) * 100;
    }

    public override void ВывестиИнформацию() // Переопределение метода для отображения информации
    {
        base.ВывестиИнформацию(); // Вызов метода базового класса
        Console.WriteLine($"Тип: Грузовой\nГрузоподъемность: {грузоподъемность} т");
        Console.WriteLine($"Расход топлива на 100 км: {РасходТоплива()} л\n");
    }
}

// Класс, представляющий легковой автомобиль
class Легковой : Автомобиль
{
    private double объемДвигателя; // Поле для хранения объема двигателя

    public Легковой(string название, double V) : base(название) // Конструктор с вызовом конструктора базового класса
    {
        объемДвигателя = V;
    }

    public override double РасходТоплива() // Реализация расчета расхода топлива для легковых автомобилей
    {
        return 2.5 * объемДвигателя;
    }

    public override void ВывестиИнформацию() // Переопределение метода для отображения информации
    {
        base.ВывестиИнформацию(); // Вызов метода базового класса
        Console.WriteLine($"Тип: Легковой\nОбъем двигателя: {объемДвигателя} см³");
        Console.WriteLine($"Расход топлива на 100 км: {РасходТоплива()} л\n");
    }
}

// Основной класс программы
class Program
{
    static void Main()
    {
        List<Автомобиль> автомобили = new List<Автомобиль>(); // Список для хранения автомобилей

        Console.Write("Введите количество автомобилей: ");
        int n;
        while (!int.TryParse(Console.ReadLine(), out n) || n <= 0) // Проверка корректности ввода количества автомобилей
        {
            Console.Write("Ошибка! Введите положительное число: ");
        }

        for (int i = 0; i < n; i++) // Цикл для добавления автомобилей в список
        {
            Console.Write("\nВыберите тип автомобиля (1 - Грузовой, 2 - Легковой): ");
            int тип;
            while (!int.TryParse(Console.ReadLine(), out тип) || (тип != 1 && тип != 2)) // Проверка ввода типа автомобиля
            {
                Console.Write("Ошибка! Введите 1 (Грузовой) или 2 (Легковой): ");
            }

            Console.Write("Введите название автомобиля: ");
            string название = Console.ReadLine();

            if (тип == 1) // Если выбран грузовой автомобиль
            {
                Console.Write("Введите грузоподъемность (т): ");
                double p;
                while (!double.TryParse(Console.ReadLine(), out p) || p <= 0) // Проверка ввода грузоподъемности
                {
                    Console.Write("Ошибка! Введите положительное число: ");
                }
                автомобили.Add(new Грузовой(название, p)); // Добавление грузового автомобиля в список
            }
            else // Если выбран легковой автомобиль
            {
                Console.Write("Введите объем двигателя (л): ");
                double v;
                while (!double.TryParse(Console.ReadLine(), out v) || v <= 0) // Проверка ввода объема двигателя
                {
                    Console.Write("Ошибка! Введите положительное число: ");
                }
                автомобили.Add(new Легковой(название, v)); // Добавление легкового автомобиля в список
            }
        }

        Console.WriteLine("\n*** Информация обо всех автомобилях ***");
        foreach (var авто in автомобили) // Вывод информации обо всех автомобилях
        {
            авто.ВывестиИнформацию();
        }
    }
}